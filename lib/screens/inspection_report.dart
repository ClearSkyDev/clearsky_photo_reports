import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:printing/printing.dart';

/// Displays a simple preview of a saved inspection and allows exporting it
/// as a PDF. The inspection data is fetched from Firestore using the provided
/// [inspectionId].
class InspectionReportScreen extends StatefulWidget {
  final String inspectionId;
  const InspectionReportScreen({super.key, required this.inspectionId});

  @override
  State<InspectionReportScreen> createState() => _InspectionReportScreenState();
}

class _InspectionReportScreenState extends State<InspectionReportScreen> {
  Map<String, dynamic>? inspection;
  bool loading = true;

  @override
  void initState() {
    super.initState();
    _loadInspection();
  }

  Future<void> _loadInspection() async {
    final uid = FirebaseAuth.instance.currentUser!.uid;
    final snap = await FirebaseFirestore.instance
        .collection('users')
        .doc(uid)
        .collection('inspections')
        .doc(widget.inspectionId)
        .get();
    if (!mounted) return;
    setState(() {
      inspection = snap.data();
      loading = false;
    });
  }

  String _buildHtml() {
    final photos = inspection?['photos'] ?? [];
    final imageHtml = (photos as List)
        .map((url) => '<img src="$url" style="width:100%; margin-bottom:10px;" />')
        .join();

    return '''
      <html>
      <body style="font-family: sans-serif; padding: 20px;">
        <h1>ClearSky Inspection Report</h1>
        <h3>Client: ${inspection?['clientName'] ?? ''}</h3>
        <h3>Address: ${inspection?['address'] ?? ''}</h3>
        <h3>Carrier: ${inspection?['carrier'] ?? ''}</h3>
        <h3>Peril: ${inspection?['peril'] ?? ''}</h3>
        <hr/>
        <h2>Photos</h2>
        $imageHtml
        <hr/>
        <p style="font-size: 12px;">Generated by ClearSky Photo Reports</p>
      </body>
      </html>
    ''';
  }

  Future<void> _exportPdf() async {
    final html = _buildHtml();
    await Printing.layoutPdf(
      onLayout: (format) => Printing.convertHtml(
        format: format,
        html: html,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (loading) {
      return const Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }

    return Scaffold(
      appBar: AppBar(title: const Text('Final Report')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Expanded(
              child: SingleChildScrollView(
                child: Text(_buildHtml()),
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _exportPdf,
              child: const Text('Export as PDF'),
            ),
          ],
        ),
      ),
    );
  }
}
